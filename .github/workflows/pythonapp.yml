# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  pull_request:
    branches: [master]

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install project
        run: |
          poetry install --with test --no-interaction --no-root
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --statistics --output-file=flake8_output.txt
      - name: Test with pytest
        run: |
          poetry run pytest backend/
      - name: Bandit scan
        run: |
          poetry run bandit -r . -c bandit.yaml
      - name: Coverage
        run: |
          poetry run coverage xml -o coverage-all.xml
      - name: Upload coverage results
        uses: actions/upload-artifact@v1
        with:
          name: coverage-results
          path: coverage-all.xml
      - name: Upload test report
        uses: actions/upload-artifact@v1
        with:
          name: test-report
          path: report.html
      - name: Upload test report JSON
        uses: actions/upload-artifact@v1
        with:
          name: test-report
          path: report.json
      - name: Upload Flake8 report
        uses: actions/upload-artifact@v1
        with:
          name: test-report
          path: flake8_output.txt
      - name: MyPy
        run: |
          poetry run mypy --html-report report --show-error-codes --ignore-missing-imports backend/
      - name: Upload Mypy report
        uses: actions/upload-artifact@v1
        with:
          name: test-report
          path: report

  sonar-qube:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - name: Download coverage results
        uses: actions/download-artifact@v1
        with:
          name: coverage-results
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
